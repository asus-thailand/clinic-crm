// --- ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ---
const SUPABASE_URL = 'https://dmzsughhxdgpnazvjtci.supabase.co'; // ‚ùó ‡∏ß‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRtenN1Z2hoeGRncG5henZqdGNpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc1Nzk4NDIsImV4cCI6MjA3MzE1NTg0Mn0.eeWTW871ork6ZH43U_ergJ7rb1ePMT7ztPOdh5hgqLM'; // ‚ùó ‡∏ß‡∏≤‡∏á Anon Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

if (SUPABASE_URL === 'YOUR_SUPABASE_URL' || SUPABASE_ANON_KEY === 'YOUR_SUPABASE_ANON_KEY') {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SUPABASE_URL ‡πÅ‡∏•‡∏∞ SUPABASE_ANON_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå script.js ‡∏Å‡πà‡∏≠‡∏ô');
}

const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// üî¥ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Role ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
// let currentUserRole = 'sales'; 

let currentUserRole = 'viewer'; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô viewer ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏¢‡∏≤‡∏°‡πÄ‡∏ù‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π" ‡πÅ‡∏•‡∏∞ "‡∏î‡∏∂‡∏á Role"
async function checkAuthAndGetRole() {
    const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
    
    if (!session) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ session (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô) ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ login.html
        window.location.href = 'login.html';
        return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session (‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß) ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
    const userId = session.user.id;
    const { data, error } = await supabaseClient
        .from('users')
        .select('role')
        .eq('id', userId)
        .single();

    if (error) {
        console.error('Error fetching user role:', error);
        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ role ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô viewer ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        currentUserRole = 'viewer';
    } else {
        // ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤ role ‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ currentUserRole
        currentUserRole = data.role;
    }

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ Role ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ô‡∏±‡πâ‡∏ô‡πÜ
    updateUIByRole();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
async function handleLogout() {
    const { error } = await supabaseClient.auth.signOut();
    if (error) {
        console.error('Error logging out:', error);
    } else {
        window.location.href = 'login.html';
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
checkAuthAndGetRole();
// ------------------------------------------

// --- ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
const initialData = [
    // ... ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ...
];
// (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
// ...
// ... (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô renderTable, startEdit, addNewRow, etc. ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) ...
// ...
let tableData = [...initialData];
let editingCell = null;
let copiedCell = null;
let contextCell = null;
let selectedCell = null;
let autoSaveInterval = null;

const dropdownOptions = {
    channel: ['Fbc By ‡∏´‡∏°‡∏≠‡∏ò‡∏µ‡∏£‡πå', 'FBC-EYES', 'FBC-Hair', 'Walk-in', 'Online', 'Facebook', 'Instagram', 'Line'],
    procedure: ['‡∏õ‡∏•‡∏π‡∏Å‡∏ú‡∏°', '‡∏¢‡∏Å‡∏Ñ‡∏¥‡πâ‡∏ß', '‡∏à‡∏°‡∏π‡∏Å', '‡∏ï‡∏≤', '‡∏â‡∏µ‡∏î‡∏ü‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå', '‡πÇ‡∏ö‡∏ó‡πá‡∏≠‡∏Å‡∏ã‡πå', '‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå'],
    sales: ['MAM', 'AU', 'GOLF', 'Online', 'JANE', 'TOM', 'LISA'],
    csConfirm: ['CSX', 'CSY', 'CSZ'],
    confirmY: ['Y', 'N'],
    transfer100: ['Y', 'N'],
    status1: ['‡∏ò‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 1', '‡∏ò‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 2', '‡∏ò‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 3', '‡∏ò‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 4', '‡∏ò‡∏á‡πÅ‡∏î‡∏á', '‡πÇ‡∏¢‡∏Å‡∏ó‡∏£‡∏≤‡∏°', '‡∏ô‡∏±‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏ß‡πâ']
};

function validatePhone(phone) { const cleaned = phone.replace(/\D/g, ''); return cleaned.length >= 9 && cleaned.length <= 10; }
function sanitizeInput(input) { return input.replace(/[<>]/g, ''); }

function renderTable() {
    const tbody = document.getElementById('tableBody');
    tbody.innerHTML = '';
    updateStats();
    tableData.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="row-number">${index + 100}</td><td class="admin-cell" ondblclick="startEdit(this, ${index}, 'date')" onclick="selectCell(this)">${row.date || ''}</td><td class="admin-cell" ondblclick="startEdit(this, ${index}, 'leadCode')" onclick="selectCell(this)">${row.leadCode || ''}</td><td class="admin-cell" ondblclick="startEdit(this, ${index}, 'name')" onclick="selectCell(this)">${row.name || ''}</td><td class="admin-cell" ondblclick="startEdit(this, ${index}, 'phone')" onclick="selectCell(this)">${row.phone || ''}</td><td class="admin-cell has-dropdown" ondblclick="startEdit(this, ${index}, 'channel')" onclick="selectCell(this)">${row.channel || ''}</td><td class="admin-cell has-dropdown" ondblclick="startEdit(this, ${index}, 'procedure')" onclick="selectCell(this)">${row.procedure || ''}</td><td class="admin-cell" ondblclick="startEdit(this, ${index}, 'deposit')" onclick="selectCell(this)">${row.deposit || ''}</td><td class="admin-cell yn-cell ${row.confirmY === 'Y' ? 'yes' : row.confirmY === 'N' ? 'no' : ''} has-dropdown" ondblclick="startEdit(this, ${index}, 'confirmY')" onclick="selectCell(this)">${row.confirmY || ''}</td><td class="admin-cell yn-cell ${row.transfer100 === 'Y' ? 'yes' : row.transfer100 === 'N' ? 'no' : ''} has-dropdown" ondblclick="startEdit(this, ${index}, 'transfer100')" onclick="selectCell(this)">${row.transfer100 || ''}</td><td class="admin-cell has-dropdown" ondblclick="startEdit(this, ${index}, 'csConfirm')" onclick="selectCell(this)">${row.csConfirm || ''}</td><td class="admin-cell has-dropdown" ondblclick="startEdit(this, ${index}, 'sales')" onclick="selectCell(this)">${row.sales || ''}</td><td class="status-cell" ondblclick="startEdit(this, ${index}, 'lastStatus')" onclick="selectCell(this)">${row.lastStatus || ''}</td><td class="status-cell" ondblclick="startEdit(this, ${index}, 'updateAccess')" onclick="selectCell(this)">${row.updateAccess || ''}</td><td class="status-cell" ondblclick="startEdit(this, ${index}, 'callTime')" onclick="selectCell(this)">${row.callTime || ''}</td><td class="status-cell has-dropdown" ondblclick="startEdit(this, ${index}, 'status1')" onclick="selectCell(this)">${row.status1 || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'reason')" onclick="selectCell(this)">${row.reason || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'etc')" onclick="selectCell(this)">${row.etc || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'hnCustomer')" onclick="selectCell(this)">${row.hnCustomer || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'oldAppointment')" onclick="selectCell(this)">${row.oldAppointment || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'dr')" onclick="selectCell(this)">${row.dr || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'closedAmount')" onclick="selectCell(this)">${row.closedAmount || ''}</td><td class="etc-cell" ondblclick="startEdit(this, ${index}, 'appointmentDate')" onclick="selectCell(this)">${row.appointmentDate || ''}</td>`;
        tbody.appendChild(tr);
    });
}
function selectCell(cell) { document.querySelectorAll('.selected').forEach(c => c.classList.remove('selected')); cell.classList.add('selected'); selectedCell = cell; }
function startEdit(cell, rowIndex, field) { if (currentUserRole === 'viewer') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', true); return; } if (editingCell) finishEdit(); editingCell = cell; const value = tableData[rowIndex][field] || ''; cell.classList.add('editing'); if (dropdownOptions[field]) { const select = document.createElement('select'); select.className = 'cell-select'; const emptyOption = document.createElement('option'); emptyOption.value = ''; emptyOption.textContent = ''; select.appendChild(emptyOption); dropdownOptions[field].forEach(opt => { const option = document.createElement('option'); option.value = opt; option.textContent = opt; if (opt === value) option.selected = true; select.appendChild(option); }); select.addEventListener('change', () => { tableData[rowIndex][field] = select.value; finishEdit(); }); select.addEventListener('blur', finishEdit); cell.innerHTML = ''; cell.appendChild(select); select.focus(); } else { const input = document.createElement('input'); input.type = 'text'; input.className = 'cell-input'; input.value = value; input.addEventListener('keydown', (e) => { if (e.key === 'Enter') { if (field === 'phone' && input.value && !validatePhone(input.value)) { showStatus('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', true); return; } tableData[rowIndex][field] = input.value; finishEdit(); } else if (e.key === 'Escape') { finishEdit(true); } }); input.addEventListener('blur', () => { if (field === 'phone' && input.value && !validatePhone(input.value)) { showStatus('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', true); return; } tableData[rowIndex][field] = input.value; finishEdit(); }); cell.innerHTML = ''; cell.appendChild(input); input.focus(); input.select(); } }
function finishEdit(cancel = false) { if (!editingCell) return; editingCell.classList.remove('editing'); editingCell = null; if (!cancel) { saveToLocalStorage(); showStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß'); } renderTable(); }
function updateStats() { document.getElementById('totalCustomers').textContent = tableData.length; const today = new Date(); const todayStr = `${today.getDate()}-${today.getMonth() + 1}-${(today.getFullYear() + 543) % 100}`; const todayCount = tableData.filter(row => row.date === todayStr).length; document.getElementById('todayCustomers').textContent = todayCount; const pending = tableData.filter(row => !row.closedAmount || row.closedAmount === '').length; document.getElementById('pendingCustomers').textContent = pending; const closed = tableData.filter(row => row.closedAmount && row.closedAmount !== '').length; document.getElementById('closedDeals').textContent = closed; }
function addNewRow() { if (currentUserRole === 'viewer') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', true); return; } const newRow = { date: '', leadCode: (parseInt(tableData[tableData.length - 1]?.leadCode || '1151') + 1).toString(), name: '', phone: '', channel: '', procedure: '', deposit: '', confirmY: '', transfer100: '', csConfirm: '', sales: '', lastStatus: '', updateAccess: '', callTime: '', status1: '', reason: '', etc: '', hnCustomer: '', oldAppointment: '', dr: '', closedAmount: '', appointmentDate: '' }; tableData.push(newRow); renderTable(); saveToLocalStorage(); showStatus('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß'); }
function searchTable(query) { const sanitized = sanitizeInput(query); const rows = document.querySelectorAll('#tableBody tr'); rows.forEach(row => { const text = row.textContent.toLowerCase(); row.style.display = text.includes(sanitized.toLowerCase()) ? '' : 'none'; }); }
function filterTable() { const statusFilter = document.getElementById('statusFilter').value; const salesFilter = document.getElementById('salesFilter').value; const rows = document.querySelectorAll('#tableBody tr'); rows.forEach((row, index) => { let show = true; if (statusFilter && tableData[index].status1 !== statusFilter) { show = false; } if (salesFilter && tableData[index].sales !== salesFilter) { show = false; } row.style.display = show ? '' : 'none'; }); }
function showStatus(message, isError = false) { const indicator = document.getElementById('statusIndicator'); indicator.textContent = message; indicator.classList.add('show'); indicator.classList.toggle('error', isError); setTimeout(() => { indicator.classList.remove('show'); }, 2000); }
function saveToLocalStorage() { try { localStorage.setItem('beautyCRMData', JSON.stringify(tableData)); return true; } catch (e) { console.error('Failed to save data:', e); showStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', true); return false; } }
function loadFromLocalStorage() { try { const saved = localStorage.getItem('beautyCRMData'); if (saved) { tableData = JSON.parse(saved); } } catch (e) { console.error('Failed to load data:', e); tableData = [...initialData]; showStatus('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', true); } }
function exportData() { const headers = ['#', '‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ', '‡∏£‡∏´‡∏±‡∏™‡∏•‡∏µ‡∏î', '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', '‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£', '‡∏°‡∏±‡∏î‡∏à‡∏≥', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Y/N', '‡πÇ‡∏≠‡∏ô 100%', 'CS ‡∏¢‡∏±‡∏ô', '‡πÄ‡∏ã‡∏•‡∏•‡πå', 'Last Status', '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó', '‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ó‡∏£', 'Status 1', '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•', 'ETC', 'HN', '‡∏ô‡∏±‡∏î‡∏ú‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤', 'DR.', '‡∏¢‡∏≠‡∏î‡∏õ‡∏¥‡∏î', '‡∏ô‡∏±‡∏î‡∏ó‡∏≥']; let csv = '\ufeff' + headers.join(',') + '\n'; tableData.forEach((row, index) => { const rowData = Object.values(row).map(val => `"${String(val || '').replace(/"/g, '""')}"`); csv += `${index + 100},${rowData.join(',')}\n`; }); const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `beauty_clinic_crm_${new Date().toISOString().split('T')[0]}.csv`; a.click(); showStatus('Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'); }
function switchRole() { alert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Switch Role'); }
function showSettings() { alert('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'); }
document.addEventListener('contextmenu', (e) => { const cell = e.target.closest('td'); if (cell && !cell.classList.contains('row-number')) { e.preventDefault(); contextCell = cell; const menu = document.getElementById('contextMenu'); menu.style.display = 'block'; const menuRect = {width: 150, height: 200}; let x = e.pageX, y = e.pageY; if (x + menuRect.width > window.innerWidth) x = window.innerWidth - menuRect.width - 5; if (y + menuRect.height > window.innerHeight) y = window.innerHeight - menuRect.height - 5; menu.style.left = `${x}px`; menu.style.top = `${y}px`; } });
document.addEventListener('click', () => { document.getElementById('contextMenu').style.display = 'none'; if (editingCell) finishEdit(true); });
function editCell() { if (contextCell) contextCell.dispatchEvent(new Event('dblclick')); }
function copyCell() { if (contextCell) { copiedCell = contextCell.textContent; showStatus('‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß'); } }
function pasteCell() { if (contextCell && copiedCell !== null) { if (currentUserRole === 'viewer') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', true); return; } const rowIndex = contextCell.parentElement.rowIndex - 1; const cellIndex = contextCell.cellIndex -1; const field = Object.keys(tableData[0])[cellIndex]; if (field) { tableData[rowIndex][field] = copiedCell; renderTable(); saveToLocalStorage(); showStatus('‡∏ß‡∏≤‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß'); } } }
function insertRowAction(offset) { if (currentUserRole !== 'administrator') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏ó‡∏£‡∏Å‡πÅ‡∏ñ‡∏ß', true); return; } if (contextCell) { const rowIndex = contextCell.parentElement.rowIndex - 1; const newRow = Object.fromEntries(Object.keys(initialData[0]).map(key => [key, ''])); tableData.splice(rowIndex + offset, 0, newRow); renderTable(); saveToLocalStorage(); showStatus(offset ? '‡πÅ‡∏ó‡∏£‡∏Å‡πÅ‡∏ñ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß' : '‡πÅ‡∏ó‡∏£‡∏Å‡πÅ‡∏ñ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß'); } }
function insertRowAbove() { insertRowAction(0); }
function insertRowBelow() { insertRowAction(1); }
function deleteRow() { if (currentUserRole !== 'administrator') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', true); return; } if (contextCell) { const rowIndex = contextCell.parentElement.rowIndex - 1; if (confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ?')) { tableData.splice(rowIndex, 1); renderTable(); saveToLocalStorage(); showStatus('‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡πâ‡∏ß'); } } }
function clearCell() { if (currentUserRole === 'viewer') { showStatus('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', true); return; } if (contextCell) { const rowIndex = contextCell.parentElement.rowIndex - 1; const cellIndex = contextCell.cellIndex -1; const field = Object.keys(tableData[0])[cellIndex]; if (field) { tableData[rowIndex][field] = ''; renderTable(); saveToLocalStorage(); showStatus('‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß'); } } }
function initAutoSave() { if (autoSaveInterval) clearInterval(autoSaveInterval); autoSaveInterval = setInterval(() => { if (saveToLocalStorage()) { } }, 60000); }
function updateUIByRole() { const userBadge = document.querySelector('.user-badge'); const addUserButton = document.getElementById('addUserButton'); const deleteRowMenuItem = document.getElementById('deleteRowMenuItem'); addUserButton.style.display = 'none'; deleteRowMenuItem.style.display = 'none'; let permissions = { 'administrator': { badge: 'Administrator', color: '#dc3545', canAdd: true, canDelete: true }, 'sales': { badge: 'Sales', color: '#007bff', canAdd: true, canDelete: false }, 'viewer': { badge: 'Viewer', color: '#6c757d', canAdd: false, canDelete: false } }; let currentPermission = permissions[currentUserRole]; if (currentPermission) { userBadge.textContent = currentPermission.badge; userBadge.style.backgroundColor = currentPermission.color; if (currentPermission.canAdd) addUserButton.style.display = 'inline-block'; if (currentPermission.canDelete) deleteRowMenuItem.style.display = 'block'; } }

window.addEventListener('beforeunload', saveToLocalStorage);
// loadFromLocalStorage(); // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏à‡∏≤‡∏Å Supabase ‡πÅ‡∏ó‡∏ô
// renderTable(); // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á Role ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
initAutoSave();
// updateUIByRole(); // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô checkAuthAndGetRole()
