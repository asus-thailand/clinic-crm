// ================================================================================
// Sales Performance Dashboard - V2 SCRIPT
// [MODIFIED] Added Interactive "What-If" Financial Table (Section 6)
// [MODIFIED] Now calls window.apiV2.getSalesReportV2() from api-v2.js to fetch data
// ================================================================================

// -- GLOBAL STATE --
const state = {
    currentUser: null,
    reportData: null, // Stores all data received from API V2
    
    // [FALLBACK DATA] Initial data for the financial table (from HTML example)
    // Used if API V2 doesn't return data or before it loads.
    financialData: [
        { month: 'ก.ค.', budget: 194969, inbox: 1002, lead: 68, revenue: 1296726 },
        { month: 'ส.ค.', budget: 191843, inbox: 1060, lead: 73, revenue: 1631638 },
        { month: 'ก.ย.', budget: 189435, inbox: 1172, lead: 67, revenue: 1366746 }
    ]
};

// -- HELPER FUNCTIONS --
function formatCurrency(n, showSign = false) {
    const num = parseFloat(n);
    if (isNaN(num)) return '-';
    const sign = num < 0 ? '-' : (showSign ? '+' : '');
    const abs = Math.abs(Math.round(num));
    return sign + '฿' + abs.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function formatNumber(n) {
     const num = parseFloat(n);
     if (isNaN(num)) return '0';
     return num.toLocaleString();
}

function displayError(error) {
    const mainContainer = document.querySelector('.container');
    if (mainContainer) {
        mainContainer.innerHTML = `<div style="text-align: center; padding: 40px; background: #fff; margin: 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);"><h2 style="color: #dc3545;">เกิดข้อผิดพลาด</h2><p>${error.message}</p></div>`;
    }
}

// ================================================================================
// [NEW] FINANCIAL TABLE LOGIC (SECTION 6)
// ================================================================================

/**
 * Recalculates CPL and ROAS for a specific table row.
 */
function recalculateFinancialRow(rowElement) {
    const budget = parseFloat(rowElement.querySelector('.input-budget')?.value) || 0;
    const lead = parseFloat(rowElement.querySelector('.input-lead')?.value) || 0;
    const revenue = parseFloat(rowElement.querySelector('.input-revenue')?.value) || 0;

    const cpl = (lead > 0) ? (budget / lead) : 0;
    const roas = (budget > 0) ? (revenue / budget) : 0;

    const cplCell = rowElement.querySelector('.cell-cpl');
    const roasCell = rowElement.querySelector('.cell-roas');

    if (cplCell) cplCell.textContent = formatCurrency(cpl);
    if (roasCell) roasCell.textContent = `${roas.toFixed(2)}x`;
    
    // Signal that recalculation happened
    return true; 
}

/**
 * [NEW] Calculates totals for the financial table footer and updates the planner.
 */
function updateFinancialTotals() {
    const tableBody = document.getElementById('financial-table-body');
    if (!tableBody) return; // Exit if table body not found
    
    const rows = tableBody.querySelectorAll('tr');
    
    let totalBudget = 0;
    let totalInbox = 0;
    let totalLead = 0;
    let totalRevenue = 0;

    rows.forEach(row => {
        totalBudget += parseFloat(row.querySelector('.input-budget')?.value) || 0;
        totalInbox += parseFloat(row.querySelector('.input-inbox')?.value) || 0;
        totalLead += parseFloat(row.querySelector('.input-lead')?.value) || 0;
        totalRevenue += parseFloat(row.querySelector('.input-revenue')?.value) || 0;
    });

    const totalCPL = (totalLead > 0) ? (totalBudget / totalLead) : 0;
    const totalROAS = (totalBudget > 0) ? (totalRevenue / totalBudget) : 0;

    // 1. Update Table Footer (Section 6)
    const totalBudgetEl = document.getElementById('total-budget');
    const totalInboxEl = document.getElementById('total-inbox');
    const totalLeadEl = document.getElementById('total-lead');
    const totalRevenueEl = document.getElementById('total-revenue');
    const totalCplEl = document.getElementById('total-cpl');
    const totalRoasEl = document.getElementById('total-roas');

    if (totalBudgetEl) totalBudgetEl.textContent = formatCurrency(totalBudget);
    if (totalInboxEl) totalInboxEl.textContent = formatNumber(totalInbox);
    if (totalLeadEl) totalLeadEl.textContent = formatNumber(totalLead);
    if (totalRevenueEl) totalRevenueEl.textContent = formatCurrency(totalRevenue);
    if (totalCplEl) totalCplEl.textContent = formatCurrency(totalCPL);
    if (totalRoasEl) totalRoasEl.textContent = `${totalROAS.toFixed(2)}x`;

    // 2. Update Stat Cards (Section 6)
    const financialBudgetEl = document.getElementById('financial-budget');
    const financialRevenueEl = document.getElementById('financial-revenue');
    const financialRoasEl = document.getElementById('financial-roas');

    if (financialBudgetEl) financialBudgetEl.textContent = formatCurrency(totalBudget);
    if (financialRevenueEl) financialRevenueEl.textContent = formatCurrency(totalRevenue);
    if (financialRoasEl) financialRoasEl.textContent = `${totalROAS.toFixed(2)}x`;

    // 3. [THE LINK] Update Planner (Section 7) with new totals
    const plannerInboxEl = document.getElementById('inboxes');
    if (plannerInboxEl) {
        plannerInboxEl.value = totalInbox;
    }
    
    // 4. Update Planner Notes
    const plannerNotes = document.getElementById('planner-notes');
    if (plannerNotes) {
        // Update Inbox -> Lead % in Planner based on new totals
        const inboxToLeadPercent = (totalInbox > 0) ? (totalLead / totalInbox * 100) : 0;
        const inboxToLeadEl = document.getElementById('inboxToLead');
        const inboxToLeadValueEl = document.getElementById('inboxToLeadValue');
        if (inboxToLeadEl) inboxToLeadEl.value = inboxToLeadPercent.toFixed(1);
        if (inboxToLeadValueEl) inboxToLeadValueEl.textContent = `${inboxToLeadPercent.toFixed(1)}%`;

        // Calculate estimated sales based on Planner's Lead -> Sale %
        const leadToSalePercent = parseFloat(document.getElementById('leadToSale')?.value) || 28.6;
        const totalSales = Math.round(totalLead * (leadToSalePercent / 100));
        
        plannerNotes.textContent = `* อิงจากผลรวมในตาราง: Inbox ${formatNumber(totalInbox)} → Lead ${formatNumber(totalLead)} → Sale ${formatNumber(totalSales)}`;
    }

    // 5. Trigger Planner recalculation
    if (typeof calcPlanner === 'function') {
        calcPlanner();
    }
}


/**
 * [MODIFIED] Renders the interactive financial table.
 */
function renderFinancials(financialPerformanceData) { 
    const tableBody = document.getElementById('financial-table-body');
    const tableFooter = document.getElementById('financial-table-footer');

    // Ensure elements exist
    if (!tableBody || !tableFooter) {
        console.error("Financial table body or footer element not found.");
        return;
    }
    
    // Use monthly_breakdown from the API response, or fallback to state.financialData
    const financialData = financialPerformanceData?.monthly_breakdown || state.financialData; 
    
    if (!financialData || financialData.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7">ไม่มีข้อมูลรายเดือน</td></tr>';
        // Render footer structure with zeros/placeholders
         tableFooter.innerHTML = `
            <tr>
                <td>Total</td>
                <td id="total-budget">฿0</td>
                <td id="total-inbox">0</td>
                <td id="total-lead">0</td>
                <td id="total-revenue">฿0</td>
                <td id="total-cpl">-</td>
                <td id="total-roas" class="good">0.00x</td>
            </tr>
        `;
        // Update stats cards with zeros too
        const financialBudgetEl = document.getElementById('financial-budget');
        const financialRevenueEl = document.getElementById('financial-revenue');
        const financialRoasEl = document.getElementById('financial-roas');
        if (financialBudgetEl) financialBudgetEl.textContent = formatCurrency(0);
        if (financialRevenueEl) financialRevenueEl.textContent = formatCurrency(0);
        if (financialRoasEl) financialRoasEl.textContent = `0.00x`;

        console.warn("No monthly financial data found to render.");
        return; // Exit if no monthly data
    }
    
    tableBody.innerHTML = ''; // Clear loading message
    
    financialData.forEach(month => {
        const tr = document.createElement('tr');
        // Use Math.round for currency values read from API
        tr.innerHTML = `
            <td>${month.month || 'N/A'}</td> 
            <td><input type="number" class="input-budget" value="${Math.round(month.budget || 0)}"></td>
            <td><input type="number" class="input-inbox" value="${month.inbox || 0}"></td>
            <td><input type="number" class="input-lead" value="${month.lead || 0}"></td>
            <td><input type="number" class="input-revenue" value="${Math.round(month.revenue || 0)}"></td>
            <td class="cell-calc cell-cpl">...</td>
            <td class="cell-calc cell-roas">...</td>
        `;
        tableBody.appendChild(tr);
        // Calculate initial CPL/ROAS for the row
        recalculateFinancialRow(tr);
    });
    
    // Create Footer Structure
    tableFooter.innerHTML = `
        <tr>
            <td>Total</td>
            <td id="total-budget">...</td>
            <td id="total-inbox">...</td>
            <td id="total-lead">...</td>
            <td id="total-revenue">...</td>
            <td id="total-cpl">...</td>
            <td id="total-roas" class="good">...</td>
        </tr>
    `;
    
    // Calculate initial Totals
    updateFinancialTotals();
    
    // Add Event Listener using Event Delegation on the tbody
    tableBody.addEventListener('input', (event) => {
        // Check if the event was triggered by an INPUT element
        if (event.target && event.target.tagName === 'INPUT') {
            const row = event.target.closest('tr');
            if (row) {
                recalculateFinancialRow(row); // Recalculate the changed row
                updateFinancialTotals(); // Recalculate all totals and update planner
            }
        }
    });
}


// ================================================================================
// DATA RENDERING FUNCTIONS (V1 - Static Placeholders / API Driven)
// ================================================================================

// Renders Funnel data
function renderFunnel(funnelData) {
    const inboxesEl = document.getElementById('funnel-inboxes');
    const leadsEl = document.getElementById('funnel-leads');
    const salesEl = document.getElementById('funnel-sales');

    if (inboxesEl) inboxesEl.textContent = formatNumber(funnelData?.inboxes || 0);
    if (leadsEl) leadsEl.textContent = formatNumber(funnelData?.qualified_leads || 0);
    if (salesEl) salesEl.textContent = formatNumber(funnelData?.closed_sales || 0);
}

// Renders Team Performance cards
function renderTeamPerformance(teamData) {
    const container = document.getElementById('team-performance-grid');
    if (!container) {
        console.error("Team performance container not found.");
        return;
    }

    if (!teamData || teamData.length === 0) {
        container.innerHTML = '<div class="stat-card"><p>ไม่มีข้อมูลทีม</p></div>';
        return;
    }
    container.innerHTML = ''; // Clear loading message
    
    teamData.forEach(team => {
        const card = document.createElement('div');
        card.className = 'stat-card';
        card.style.borderTop = `5px solid ${team.color || '#ccc'}`;
        
        let metricsHtml = '';
        // Ensure metrics is an array before trying to iterate
        if(team.metrics && Array.isArray(team.metrics)) { 
            team.metrics.forEach(metric => {
                metricsHtml += `<div class="metric-item"><span>- ${metric.label || 'Metric'}</span> <span>${metric.value || '-'}</span></div>`;
            });
        }

        card.innerHTML = `
            <h3>${team.name || 'Unknown Team'}</h3>
            <div class="stat-value" style="color:${team.color || '#333'};">${team.main_metric || 'N/A'}</div>
            <div class="stat-label">${team.main_metric_label || 'Metric'}</div>
            ${metricsHtml}
            <p class="stat-subtext"><strong>Analysis:</strong> ${team.analysis || 'No analysis available.'}</p>
        `;
        container.appendChild(card);
    });
}

// Renders Recommendations list
function renderRecommendations(recommendations) {
    const list = document.getElementById('recommendations-list');
    if (!list) return;

    if (!recommendations || recommendations.length === 0) {
         list.innerHTML = '<li>ไม่มีคำแนะนำในขณะนี้</li>';
         return;
    }
    // Ensure recommendations is an array before mapping
    list.innerHTML = Array.isArray(recommendations) 
        ? recommendations.map(rec => `<li>${rec || ''}</li>`).join('')
        : '<li>ข้อมูลคำแนะนำไม่ถูกต้อง</li>';
}

// Renders KPIs using Planner Base data
function renderKPIs(plannerBaseData) {
    const inboxToLead = plannerBaseData?.inboxToLead_percent || 0;
    // Assuming Lead -> Appt is related to Lead -> Sale for now (placeholder logic)
    const leadToAppt = plannerBaseData?.leadToSale_percent || 0; 
    const target = plannerBaseData?.target || 6500000; // Use default if missing

    const kpiInboxLeadEl = document.getElementById('kpi-inbox-lead');
    const kpiLeadApptEl = document.getElementById('kpi-lead-appt');
    const kpiRevenueGoalEl = document.getElementById('kpi-revenue-goal');

    if (kpiInboxLeadEl) kpiInboxLeadEl.textContent = `เป้าหมาย ${inboxToLead.toFixed(1)}%`;
    if (kpiLeadApptEl) kpiLeadApptEl.textContent = `เป้าหมาย ${leadToAppt.toFixed(1)}%`; // Placeholder logic
    if (kpiRevenueGoalEl) kpiRevenueGoalEl.textContent = formatCurrency(target);
}

// Populates the planner with initial data from API V2
function populatePlanner(plannerBaseData) {
    if (!plannerBaseData) {
        console.warn("Planner base data missing from API response. Using default values.");
        // Use default values if API data is missing
        plannerBaseData = { 
            target: 6500000, 
            inboxes: 3234, 
            inboxToLead_percent: 8.6, 
            leadToSale_percent: 28.6, 
            avg_ticket_size: 54368, 
            leads: 276, // Calculated from defaults
            sales: 79  // Calculated from defaults
        };
    }
    
    // Store base data for the Reset button
    window.plannerBase = plannerBaseData; 

    // Get references to Planner elements (ensure they exist)
    const targetEl = document.getElementById('target');
    const inboxesEl = document.getElementById('inboxes');
    const inboxToLeadEl = document.getElementById('inboxToLead');
    const leadToSaleEl = document.getElementById('leadToSale');
    const ticketEl = document.getElementById('ticket');
    const inboxToLeadValueEl = document.getElementById('inboxToLeadValue');
    const plannerNotesEl = document.getElementById('planner-notes');

    // Populate elements if they exist
    if (targetEl) targetEl.value = plannerBaseData.target || 6500000;
    if (inboxesEl) inboxesEl.value = plannerBaseData.inboxes || 0;
    if (inboxToLeadEl) inboxToLeadEl.value = plannerBaseData.inboxToLead_percent || 0;
    if (leadToSaleEl) leadToSaleEl.value = plannerBaseData.leadToSale_percent || 0;
    if (ticketEl) ticketEl.value = plannerBaseData.avg_ticket_size || 0;
    
    if (inboxToLeadValueEl) inboxToLeadValueEl.textContent = `${(plannerBaseData.inboxToLead_percent || 0).toFixed(1)}%`;
    
     if (plannerNotesEl) {
         plannerNotesEl.textContent = `* ค่าเริ่มต้นอิงจากผล Q3: Inbox ${formatNumber(plannerBaseData.inboxes || 0)} → Lead ${formatNumber(plannerBaseData.leads || 0)} → Sale ${formatNumber(plannerBaseData.sales || 0)}`;
     }

    // Initial calculation is now triggered by updateFinancialTotals after financials render
    // calcPlanner(); 
}


// -- CORE LOGIC --
/**
 * Fetches data from API V2 and renders the entire report.
 */
async function fetchAndRenderReport() {
    if (!state.currentUser) {
        console.error("No user found. Aborting fetch.");
        displayError(new Error("User session not found. Please log in again."));
        return;
    }
     // Check if apiV2 object and its method are available
     if (typeof window.apiV2 === 'undefined' || typeof window.apiV2.getSalesReportV2 !== 'function') {
         console.error("api-v2.js not loaded correctly or apiV2 object/method not found.");
         displayError(new Error("Report API (V2) failed to load. Please check console for errors."));
         return;
     }

    try {
        console.log("Fetching Report V2 data...");
        // Call the V2 API function via the globally available apiV2 object
        const reportData = await window.apiV2.getSalesReportV2(state.currentUser.id, null, null);

        // Basic check if data is an object, even if empty
        if (!reportData || typeof reportData !== 'object') {
            throw new Error("API V2 did not return valid data (expected an object).");
        }
        
        console.log("Report V2 Data Received:", reportData); 
        state.reportData = reportData; // Store fetched data
        
        // Render sections using data from API V2, providing empty objects as fallbacks
        renderFunnel(reportData.funnel_analysis || {});
        renderTeamPerformance(reportData.team_performance || []);
        renderRecommendations(reportData.recommendations || []);
        renderKPIs(reportData.planner_base_data || {}); // Use planner base for KPIs
        
        // Render the interactive financial table using API data or fallback
        renderFinancials(reportData.financial_performance || { monthly_breakdown: state.financialData }); 
        
        // Populate the planner using API data (this happens AFTER financials render and totals calc)
        populatePlanner(reportData.planner_base_data || {});

    } catch (error) {
        console.error("Failed to load or render report V2 data:", error);
        displayError(error); // Show user-friendly error message
    }
}

// -- INITIALIZATION --
async function initializeApp() {
    // Ensure supabaseClient is ready before proceeding
    await new Promise(resolve => {
         let checks = 0;
         const interval = setInterval(() => {
             checks++;
             if (window.supabaseClient || checks > 50) { // Timeout after ~2.5s
                 clearInterval(interval);
                 resolve();
             }
         }, 50);
    });
    
    if (!window.supabaseClient) {
         console.error("Supabase client failed to initialize.");
         displayError(new Error("Failed to connect to backend service."));
         return;
    }

    // Get actual user session
    const { data: { session }, error: sessionError } = await window.supabaseClient.auth.getSession();
    
    if (sessionError) {
         console.error("Error getting user session:", sessionError);
         displayError(new Error("Error verifying user session."));
         return;
    }
    
    const user = session?.user;
    
    if (user) {
        state.currentUser = user;
        console.log("User session found:", user.id);
        // Fetch and render data immediately
        fetchAndRenderReport();
    } else {
        console.error("User not logged in, should have been redirected.");
        // Redirect logic is in HTML, but display error as fallback.
        displayError(new Error("User authentication failed. Please log in again."));
        // Optionally redirect: window.location.replace('./login.html');
    }
}

// Start the application once the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initializeApp);


// ================================================================================
// SCENARIO PLANNER LOGIC (SECTION 7)
// ================================================================================

// Default base values, will be overwritten by API data via populatePlanner
window.plannerBase = { 
    target: 6500000, 
    inboxes: 3234, 
    inboxToLead_percent: 8.6, 
    leadToSale_percent: 28.6, 
    avg_ticket_size: 54368,
    leads: 276, 
    sales: 79 
};

// References to Planner elements
const targetEl = document.getElementById('target');
const inboxesEl = document.getElementById('inboxes');
const inboxToLeadEl = document.getElementById('inboxToLead');
const leadToSaleEl = document.getElementById('leadToSale');
const ticketEl = document.getElementById('ticket');
const inboxToLeadValue = document.getElementById('inboxToLeadValue');
const leadsOut = document.getElementById('leadsOut');
const salesOut = document.getElementById('salesOut');
const revenueOut = document.getElementById('revenueOut');
const gapOut = document.getElementById('gapOut');
const insightEl = document.getElementById('insight');

/**
 * Calculates and updates the Scenario Planner results based on current inputs.
 */
function calcPlanner() {
    // Ensure elements exist before accessing value to prevent errors
    const target = Number(targetEl?.value) || 0;
    const inboxes = Number(inboxesEl?.value) || 0;
    const inboxToLead = Number(inboxToLeadEl?.value) || 0;
    const leadToSale = Number(leadToSaleEl?.value) || 0;
    const ticket = Number(ticketEl?.value) || 0;

    const leads = Math.round((inboxes * inboxToLead) / 100);
    const sales = Math.round((leads * leadToSale) / 100);
    const revenue = sales * ticket;
    const gap = revenue - target;

    // Update UI elements only if they exist
    if (leadsOut) leadsOut.textContent = leads.toLocaleString();
    if (salesOut) salesOut.textContent = sales.toLocaleString();
    if (revenueOut) revenueOut.textContent = formatCurrency(revenue);
    if (gapOut) gapOut.textContent = (gap >= 0 ? '+ ' : '') + formatCurrency(gap);

    // Update gap card style (positive/negative)
    const gapCard = gapOut?.parentElement;
    if (gapCard) {
        gapCard.classList.remove('positive', 'negative');
        gapCard.classList.add(gap >= 0 ? 'positive' : 'negative');
    }

    // Generate insight text
    let insight = '';
    if (gap >= 0) {
        const revenueOver = formatCurrency(gap);
        insight = `ยอดขายเกินเป้า ${revenueOver} 🎉 คุณสามารถขยายแคมเปญต่อได้เลย!`;
    } else {
        const missing = Math.abs(gap);
        const neededSales = (ticket > 0) ? Math.ceil(missing / ticket) : 0;
        // Ensure leadToSale is not zero before dividing
        const neededLeads = (leadToSale > 0) ? Math.ceil(neededSales / (leadToSale / 100)) : 0;
        // Ensure inboxes is not zero before dividing
        const targetConversion = (inboxes > 0) ? (neededLeads * 100) / inboxes : 0;
        
        insight = `ยังขาด <span class="planner-highlight">${formatCurrency(missing)}</span> ต้องเพิ่มอีกประมาณ <span class="planner-highlight">${neededSales}</span> เคสเพื่อถึงเป้า <br><br>
        เพื่อบรรลุเป้า คุณต้องเพิ่ม Conversion Rate ของ Inbox→Lead เป็น <span class="planner-highlight">${targetConversion.toFixed(1)}%</span> หรือเพิ่ม <span class="planner-highlight">${neededLeads}</span> Leads`;
    }
    // Update insight element if it exists
    if (insightEl) insightEl.innerHTML = insight;
}

// --- Event Listeners for Planner (Section 7) ---
// Add listeners only if the elements exist

if (inboxToLeadEl && inboxToLeadValue) {
    inboxToLeadEl.addEventListener('input', () => {
        inboxToLeadValue.textContent = `${inboxToLeadEl.value}%`;
        calcPlanner(); // Recalculate Planner
        // If % in Planner changes, update the note in Planner based on Financial table totals
        updateFinancialTotals(); 
    });
}

// Add listeners for other planner inputs to trigger recalculation
if (inboxesEl) inboxesEl.addEventListener('input', calcPlanner);
if (leadToSaleEl) leadToSaleEl.addEventListener('input', calcPlanner);
if (ticketEl) ticketEl.addEventListener('input', calcPlanner);
if (targetEl) targetEl.addEventListener('input', calcPlanner);

// Calculate button (optional, as inputs trigger real-time updates)
const calcBtn = document.getElementById('calcBtn');
if (calcBtn) calcBtn.addEventListener('click', calcPlanner);

// Reset button
const resetBtn = document.getElementById('resetBtn');
if (resetBtn) {
    resetBtn.addEventListener('click', () => {
        // Use base values stored in window.plannerBase (either default or from API)
        const base = window.plannerBase || {}; 
        
        // Reset Planner inputs to base values
        if (targetEl) targetEl.value = base.target || 6500000;
        if (inboxesEl) inboxesEl.value = base.inboxes || 0;
        if (inboxToLeadEl) inboxToLeadEl.value = base.inboxToLead_percent || 0;
        if (leadToSaleEl) leadToSaleEl.value = base.leadToSale_percent || 0;
        if (ticketEl) ticketEl.value = base.avg_ticket_size || 0;
        if (inboxToLeadValue) inboxToLeadValue.textContent = `${(base.inboxToLead_percent || 0).toFixed(1)}%`;
        
        // Resetting Planner should also reset the Financial table back to the initial API/fallback values
        // Re-fetch the initial financial data from state.reportData or state.financialData
        const initialFinancialData = state.reportData?.financial_performance?.monthly_breakdown || state.financialData;
        
        // Re-render the financial table with the initial data.
        // This function call will automatically trigger updateFinancialTotals and calcPlanner.
        renderFinancials({ monthly_breakdown: initialFinancialData }); 
    });
}

// Initial calculation is triggered within the fetchAndRenderReport -> renderFinancials -> updateFinancialTotals chain.
